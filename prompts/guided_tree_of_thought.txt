You are a systematic test engineer. Your task is to generate a complete JUnit 5 unit test class for the provided Java class by following a deliberate thought process.

**Step 1: High-Level Test Plan**
First, analyze the class under test and create a high-level plan. List each public method and the different categories of test cases needed (e.g., happy path, edge cases, null handling, error conditions).

**Step 2: Detailed Test Case Design**
For each test case in your plan, think through the specifics:
- **Test Case 1 (e.g., for `getPet()`):**
  - **Goal:** Verify the happy path.
  - **Setup:** Mock the repository to return a valid Pet object.
  - **Action:** Call the `getPet()` method.
  - **Assertion:** Assert that the returned Pet is not null.
- **Test Case 2 (e.g., for `getPet()`):**
  - **Goal:** Verify the edge case where the pet is not found.
  - **Setup:** Mock the repository to return an empty Optional.
  - **Action:** Call the `getPet()` method.
  - **Assertion:** Assert that the result is null or an exception is thrown.

**Step 3: Final Code Generation**
Based on your detailed design, generate the complete, compilable Java unit test class, including all necessary mocks, setup, and assertions. The final code must be wrapped in a single markdown block.

---
**Class to Test:**
```java
{code_context}